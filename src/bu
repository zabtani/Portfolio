import emailjs from 'emailjs-com';
import { init } from 'emailjs-com';
import classes from './Contact.module.css';
import { emailjsAPI } from '../../apiconfig.js';
import { TextField, Button } from '@material-ui/core';
import CheckCircleIcon from '@material-ui/icons/CheckCircle';
import HighlightOffIcon from '@material-ui/icons/HighlightOff';
import { useRef, useState, useReducer } from 'react';
import FadeAnimation from '../Animations/FadeAnimation';
import { formReducer } from './form-reducer';

const Contact = (props) => {
  const initialFormState = {
    name: { error: false, touch: false, ref: useRef() },
    company: { error: false, touch: false, ref: useRef() },
    phone: { error: false, touch: false, ref: useRef() },
    email: { error: false, touch: false, ref: useRef() },
    // company: false,
    // phone: false,
    // email: false,
    // message: false,
  };
  const [error, setError] = useState(false);
  const [formIsSent, setFormIsSent] = useState(false);
  const [inputs, dispatchForm] = useReducer(formReducer, initialFormState);
  init(emailjsAPI.apiKey);
  const sendEmail = async (e) => {
    e.preventDefault();
    try {
      await emailjs.sendForm(
        emailjsAPI.service,
        emailjsAPI.template,
        e.target,
        emailjsAPI.apiKey
      );
      setFormIsSent(true);
    } catch (error) {
      setError(true);
    }
  };

  const validateInput = (e) => {
    dispatchForm({ type: e.target.name, value: e.target.value });
  };
  const validForm = !inputs.name.error && inputs.name.touch;

  const textFieldsData = [
    {
      name: 'name',
      type: 'text',
      label: 'Name',
      variant: 'filled',
    },
    {
      name: 'company',
      type: 'text',
      label: 'Company',
      variant: 'filled',
    },
    {
      name: 'phone',
      type: 'number',
      label: 'Phone',
      variant: 'filled',
    },
    {
      name: 'email',
      type: 'text',
      label: 'Email',
      variant: 'filled',
    },
  ];

  const contactForm = (
    <>
      <p>Fill form and i will contact you back</p>
      <form className={classes.contactForm} onSubmit={sendEmail}>
        {textFieldsData.map((data) => (
          <TextField
            key={data.name}
            inputRef={inputs[data.name].ref}
            onChange={validateInput}
            error={!inputs[data.name].error ? false : true}
            type={data.type ? data.type : false}
            name={data.name}
            label={
              inputs[data.name].error ? inputs[data.name].error : data.label
            }
            variant={data.variant}
          />
        ))}

        {/* prettier-ignore */}
        {/* prettier-ignore */}
        {/* <TextField error={formErrors.company?true:false} type="text" name="user_company" label={formErrors.company ? formErrors.comapny : 'Company'} variant="filled" />
        prettier-ignore */}
        {/* <TextField  error={formErrors.phone?true:false} type="number" name="contact_number" label={formErrors.phone ? formErrors.phone : 'Phone'} variant="filled" /> */}
        {/* prettier-ignore */}
        {/* <TextField  error={formErrors.email?true:false} type="email" name="user_email" label={formErrors.email ? formErrors.email : 'Email'} variant="filled" /> */}
        {/* prettier-ignore */}
        {/* <TextField  error={formErrors.message?true:false}  name="message"  label={formErrors.message ? formErrors.message : 'Message'} multiline rows={8}  variant="filled"/> */}
        {/* prettier-ignore */}
        {validForm && (
          <Button
            className={classes.submitButton}
            type="submit"
            variant="contained"
            color="primary"
          >
            send form
          </Button>
        )}
      </form>
    </>
  );

  const errorText = (
    <p className={classes.errorText}>
      <HighlightOffIcon className={classes.icon} /> There was an error
      connecting to the form service.
      <br /> fail to send message.
    </p>
  );
  const succsesText = (
    <p className={classes.succsesText}>
      <CheckCircleIcon className={classes.icon} /> Thanks for contacting me!
      <br /> i will reply to you as soon as possible.
    </p>
  );

  return (
    <FadeAnimation>
      <div className={`${props.className} ${classes.contact}`}>
        <h2> Contact</h2>
        {error ? errorText : formIsSent ? succsesText : contactForm}
        <p>
          You can also just send me a message to <b>zabtani@gmail.com</b>,
          <br />
          call/text me to <b>0525206108</b>, or send me a message via my
          <b className={classes.link}>
            <a href="https://linkedin.com/in/omer-zabtani-b09543155">
              {' '}
              Linkden{' '}
            </a>
          </b>
          account and i will contact you back.
        </p>
      </div>
    </FadeAnimation>
  );
};

export default Contact;
